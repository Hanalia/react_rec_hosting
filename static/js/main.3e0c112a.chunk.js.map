{"version":3,"sources":["Table.js","App.js","reportWebVitals.js","index.js"],"names":["Styles","styled","div","getExportFileBlob","columns","data","fileType","fileName","headerNames","map","col","exportValue","csvString","Papa","unparse","fields","Blob","type","Table","useTable","initialState","pageIndex","pageSize","sortBy","id","desc","useSortBy","usePagination","useExportData","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","nextPage","pageCount","gotoPage","previousPage","setPageSize","state","exportData","className","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","onClick","disabled","length","value","onChange","e","Number","target","style","width","height","toCurrency","numberString","parseFloat","toLocaleString","PaginationTableComponent","React","useMemo","Header","accessor","Cell","props","mydata","useStyles","makeStyles","theme","root","display","container","padding","spacing","horizontalPaper","margin","verticalPaper","overflow","flexDirection","alignItems","App","classes","Container","component","maxWidth","CssBaseline","Grid","align","item","xs","sm","md","Typography","variant","ResponsiveContainer","aspect","ComposedChart","top","right","bottom","left","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","stroke","XAxis","dataKey","interval","tickFormatter","unixTime","moment","format","YAxis","tick","Tooltip","formatter","name","Intl","NumberFormat","Legend","Area","fill","fillOpacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e0c112a.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { useTable, usePagination, useSortBy } from 'react-table'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport mydata from \"./mydata/github_recdata.json\";\nimport styled from \"styled-components\";\nimport { useExportData } from \"react-table-plugins\";\nimport Papa from \"papaparse\";\n\n\nconst Styles = styled.div`\n\n  .page-link {\n    color: black;\n\n  }\n\n  .right {\n    text-align: right;\n    }\n    \n    \n\n`\n\n\nfunction getExportFileBlob({ columns, data, fileType, fileName }) {\n    if (fileType === \"csv\") {\n        // CSV example\n        const headerNames = columns.map((col) => col.exportValue);\n        const csvString = Papa.unparse({ fields: headerNames, data });\n        return new Blob([csvString], { type: \"text/csv\" });\n    }\n    // Other formats goes here\n    return false;\n}\n\n\n\nfunction Table({ columns, data }) {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: { pageIndex, pageSize },\n        exportData,\n    } = useTable(\n        {\n            columns,\n            data,\n            getExportFileBlob,\n            initialState: {\n                pageIndex: 0,\n                pageSize: 10,\n                sortBy: [\n                    {\n                        id: 'date',\n                        desc: true\n                    }\n                ]\n            },\n        },\n        useSortBy,\n\n        usePagination,\n        useExportData,\n\n    )\n    // Render the UI for your table\n    return (\n        <div>\n            <table className=\"table\" {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                    {column.render('Header')}\n                                    <span>\n                                        {column.isSorted\n                                            ? column.isSortedDesc\n                                                ? ' 🔽'\n                                                : ' 🔼'\n                                            : ''}\n                                    </span>\n\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n            <ul className=\"pagination\">\n                {/* <li className=\"page-item\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                    <a className=\"page-link\">First</a>\n                </li> */}\n                <li className=\"page-item\" onClick={() => previousPage()} disabled={!canPreviousPage}>\n                    <a className=\"page-link\">{'<'}</a>\n                </li>\n                <li className=\"page-item\" onClick={() => nextPage()} disabled={!canNextPage}>\n                    <a className=\"page-link\">{'>'}</a>\n                </li>\n                {/* <li className=\"page-item\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                    <a className=\"page-link\">Last</a>\n                </li> */}\n                <li>\n                    <a className=\"page-link\">\n                        Page{' '}\n                        <strong>\n                            {pageIndex + 1} of {pageOptions.length}\n                        </strong>{' '}\n                    </a>\n                </li>\n                {/* <li>\n                    <a className=\"page-link\">\n                        <input\n                            className=\"form-control\"\n                            type=\"number\"\n                            defaultValue={pageIndex + 1}\n                            onChange={e => {\n                                const page = e.target.value ? Number(e.target.value) - 1 : 0\n                                gotoPage(page)\n                            }}\n                            style={{ width: '100px', height: '20px' }}\n                        />\n                    </a>\n                </li>{' '} */}\n                <select\n                    className=\"form-control\"\n                    value={pageSize}\n                    onChange={e => {\n                        setPageSize(Number(e.target.value))\n                    }}\n                    style={{ width: '120px', height: '38px' }}\n                >\n                    {[5, 10, 20, 30, 40, 50].map(pageSize => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n                <button onClick={() => { exportData(\"csv\", true); }}>\n                    {/* <button onClick={() => {exportData(\"csv\", true);}}> */}\n                    Export CSV\n                </button>\n            </ul>\n        </div >\n    )\n}\n\n\n\nfunction toCurrency(numberString) {\n    let number = parseFloat(numberString);\n    return number.toLocaleString('KRW');\n}\nfunction PaginationTableComponent() {\n\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Date',\n                accessor: 'date',\n            },\n            {\n                Header: '거래량(REC)',\n                accessor: 'trade_volume',\n                Cell: props => <div> {toCurrency(props.value)} </div>\n\n                // Cell: row => <div style={{ textAlign: \"center\" }}>{toCurrency(row.value)}</div>\n\n                // Cell: props => toCurrency(props.value),\n\n                //  Cell: data => data.value.toLocaleString(),\n            },\n            {\n                Header: '종가(원)',\n                accessor: 'closing_price',\n                Cell: props => <div> {toCurrency(props.value)} </div>\n\n                //   Cell: row => <div style={{ textAlign: \"center\" }}>{toCurrency(row.value)}</div>,\n                //   className: \"right\",\n                // width: 250,  \n            },\n\n\n        ],\n        []\n    )\n\n\n    const data = React.useMemo(\n        () => mydata,\n        [mydata]\n    )\n\n\n    return (\n        <Styles>\n            <Table columns={columns} data={data} />\n        </Styles>\n    )\n}\n\nexport default PaginationTableComponent;\n\n\n","// import React from \"react\";\nimport moment from \"moment\";\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport React, { PureComponent } from 'react';\nimport { Grid, Paper } from \"@material-ui/core\"\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// import   ResponsiveContainer from \"recharts\";\nimport mydata from \"./mydata/github_recdata.json\";\nimport PaginationTableComponent from \"./Table\";\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  // \n} from \"recharts\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  container: {\n    padding: theme.spacing(1),\n  },\n  horizontalPaper: {\n    margin: theme.spacing(1),\n    // padding: theme.spacing(2),\n  },\n  verticalPaper: {\n    margin: theme.spacing(1),\n    // padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"hidden\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n}))\n\n\n\n// const useStyles = makeStyles((theme) => ({\n//   paper: {\n//     marginTop: theme.spacing(8),\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//   },\n//   firsticon: {\n//     margin: theme.spacing(1),\n//     fontSize: theme.typography.pxToRem(50),\n//     // backgroundColor: theme.palette.secondary.main,\n//   },\n//   form: {\n//     width: '100%', // Fix IE 11 issue.\n//     marginTop: theme.spacing(1),\n//   },\n//   submit: {\n//     margin: theme.spacing(3, 0, 2),\n//   },\n// }));\n\n\nconst App = () => {\n\n\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"false\">\n      <CssBaseline />\n      <div className={classes.verticalPaper}>\n        <Grid container spacing={2} >\n          <Grid align=\"center\" item xs={12} sm={12} md={12}>\n            <Typography component=\"h1\" variant=\"h5\">\n              REC Price\n            </Typography>\n            <Typography component=\"h5\" variant=\"body1\">\n              (KRW/REC)\n            </Typography>\n          </Grid>\n          <Grid align=\"center\" item xs={12} sm={12} md={7}>\n\n            <ResponsiveContainer\n              width=\"99%\"\n              aspect={1.1}\n              key={`rc_${mydata.length}`}>\n\n              <ComposedChart\n                // width={500}\n                // height={400}\n                data={mydata}\n                key={`cc_${mydata.length}`}\n                margin={{\n                  top: 20,\n                  right: 20,\n                  bottom: 20,\n                  left: 20\n                }}\n              >\n                <defs>\n                  <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n                    <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n                  </linearGradient>\n                  <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                  </linearGradient>\n                </defs>\n                <CartesianGrid stroke=\"#f5f5f5\" />\n                <XAxis\n                  dataKey=\"date\"\n                  interval={100}\n                  tickFormatter={(unixTime) => moment(unixTime).format(\"YY/MM\")}\n                />\n                <YAxis tickFormatter={tick => {\n                  return tick.toLocaleString();\n                }}\n                />\n                <Tooltip\n                  formatter={(value, name, props) => [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"종가\"\n                  ]}\n                />\n                <Legend />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"closing_price\"\n                  fill=\"url(#colorPv)\"\n                  stroke=\"#82ca9d\"\n                  fillOpacity={1}\n                />{\" \"}\n                {/* <Bar\n              type=\"monotone\"\n              dataKey=\"trade_volume\"\n              barSize={20}\n              stroke=\"#8884d8\"\n              fillOpacity={1}\n              fill=\"url(#colorUv)\"\n            /> */}\n              </ComposedChart>\n            </ResponsiveContainer>\n          </Grid>\n          <Grid align=\"center\" item xs={12} sm={12} md={5}>\n            <PaginationTableComponent />\n          </Grid>\n        </Grid>\n\n      </div>\n    </Container>\n  );\n}\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}