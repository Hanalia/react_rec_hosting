{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","container","padding","spacing","horizontalPaper","margin","verticalPaper","overflow","flexDirection","alignItems","App","classes","Container","component","maxWidth","CssBaseline","className","Grid","align","item","xs","sm","Typography","variant","ResponsiveContainer","width","aspect","ComposedChart","data","mydata","top","right","bottom","left","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","stroke","XAxis","dataKey","interval","tickFormatter","unixTime","moment","format","YAxis","tick","toLocaleString","Tooltip","formatter","value","name","props","Intl","NumberFormat","Legend","Area","type","fill","fillOpacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6i3BA0BMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,UAAW,CACTC,QAASJ,EAAMK,QAAQ,IAEzBC,gBAAiB,CACfC,OAAQP,EAAMK,QAAQ,IAGxBG,cAAe,CACbD,OAAQP,EAAMK,QAAQ,GAEtBH,QAAS,OACTO,SAAU,SACVC,cAAe,SACfC,WAAY,cAuGDC,EA3EH,WACV,IAAMC,EAAUf,IAChB,OACE,eAACgB,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,UACA,cAACC,EAAA,EAAD,IACA,qBAAKC,UAAWL,EAAQL,cAAxB,SACA,cAACW,EAAA,EAAD,CAAMhB,WAAS,EAACE,QAAS,EAAzB,SACE,eAACc,EAAA,EAAD,CAAMC,MAAM,SAASC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAtC,UACI,cAACC,EAAA,EAAD,CAAYT,UAAU,KAAKU,QAAQ,KAAnC,uBAGA,cAACD,EAAA,EAAD,CAAYT,UAAU,KAAKU,QAAQ,QAAnC,uBAGA,cAACC,EAAA,EAAD,CAAqBC,MAAM,MAAMC,OAAU,IAA3C,SACE,eAACC,EAAA,EAAD,CAGEC,KAAMC,EACNxB,OAAQ,CACNyB,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IARV,UAWA,iCACE,iCAAgBC,GAAG,UAAUC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAArD,UACE,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OAEtD,iCAAgBP,GAAG,UAAUC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAArD,UACE,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,UAGxD,cAACC,EAAA,EAAD,CAAeC,OAAO,YACtB,cAACC,EAAA,EAAD,CACEC,QAAQ,OACRC,SAAW,IACXC,cAAe,SAACC,GAAD,OAAcC,IAAOD,GAAUE,OAAO,eAEvD,cAACC,EAAA,EAAD,CAAOJ,cAAe,SAAAK,GAAS,OAAOA,EAAKC,oBAG3C,cAACC,EAAA,EAAD,CACEC,UAAW,SAACC,EAAOC,EAAMC,GAAd,MAAwB,CACjC,IAAIC,KAAKC,aAAa,MAAMV,OAAOM,GACnC,mBAGJ,cAACK,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACEC,KAAK,WACLlB,QAAQ,gBACRmB,KAAK,gBACLrB,OAAO,UACPsB,YAAa,IACZ,oBCrHAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8a3ed3ba.chunk.js","sourcesContent":["// import React from \"react\";\nimport moment from \"moment\";\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport React, { PureComponent } from 'react';\nimport {Grid, Paper} from \"@material-ui/core\"\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// import   ResponsiveContainer from \"recharts\";\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  // \n} from \"recharts\";\n\n\nimport mydata from \"./mydata/github_recdata.json\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  container: {\n    padding: theme.spacing(1),\n  },\n  horizontalPaper: {\n    margin: theme.spacing(1),\n    // padding: theme.spacing(2),\n  },\n  verticalPaper: {\n    margin: theme.spacing(1),\n    // padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"hidden\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n}))\n\n\n\n// const useStyles = makeStyles((theme) => ({\n//   paper: {\n//     marginTop: theme.spacing(8),\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//   },\n//   firsticon: {\n//     margin: theme.spacing(1),\n//     fontSize: theme.typography.pxToRem(50),\n//     // backgroundColor: theme.palette.secondary.main,\n//   },\n//   form: {\n//     width: '100%', // Fix IE 11 issue.\n//     marginTop: theme.spacing(1),\n//   },\n//   submit: {\n//     margin: theme.spacing(3, 0, 2),\n//   },\n// }));\n\n\nconst App = () => {\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n    <CssBaseline />\n    <div className={classes.verticalPaper}>\n    <Grid container spacing={2} >\n      <Grid align=\"center\" item xs={12} sm={12}>\n          <Typography component=\"h1\" variant=\"h5\">\n            REC Price\n          </Typography>\n          <Typography component=\"h5\" variant=\"body1\">\n            (KRW/REC) \n          </Typography>\n          <ResponsiveContainer width=\"99%\" aspect = {1.1}>\n            <ComposedChart\n              // width={500}\n              // height={400}\n              data={mydata}\n              margin={{\n                top: 20,\n                right: 20,\n                bottom: 20,\n                left: 20\n              }}\n            >\n            <defs>\n              <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n              </linearGradient>\n              <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n              </linearGradient>\n            </defs>\n            <CartesianGrid stroke=\"#f5f5f5\" />\n            <XAxis\n              dataKey=\"date\"\n              interval ={100}\n              tickFormatter={(unixTime) => moment(unixTime).format(\"YY/MM/DD\")}\n            />\n            <YAxis tickFormatter={tick => {return tick.toLocaleString();\n                  }}\n                  />\n            <Tooltip\n              formatter={(value, name, props) => [\n                new Intl.NumberFormat(\"en\").format(value),\n                \"종가\"\n              ]}\n            />\n            <Legend />\n            <Area\n              type=\"monotone\"\n              dataKey=\"closing_price\"\n              fill=\"url(#colorPv)\"\n              stroke=\"#82ca9d\"\n              fillOpacity={1}\n            />{\" \"}\n            {/* <Bar\n              type=\"monotone\"\n              dataKey=\"trade_volume\"\n              barSize={20}\n              stroke=\"#8884d8\"\n              fillOpacity={1}\n              fill=\"url(#colorUv)\"\n            /> */}\n          </ComposedChart>\n          </ResponsiveContainer>\n          </Grid>\n      </Grid>\n    </div>\n  </Container>\n  );\n}\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}